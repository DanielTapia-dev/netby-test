trigger:
  branches:
    include:
      - main
pr: none

pool:
  vmImage: ubuntu-latest

variables:
  - group: "azure-netby-secrets"
  - name: IMAGE_NAME
    value: '$(AZ_ACR_NAME).azurecr.io/demo-spring'
  - name: IMAGE_TAG
    value: '$(Build.BuildId)'

stages:
  - stage: deploy
    displayName: Build and Deploy to ACI
    jobs:
      - job: build_and_aci
        steps:
          - script: |
              set -euo pipefail
              ./mvnw -q -DskipTests clean package || mvn -q -DskipTests clean package
              JAR="$(find target -maxdepth 1 -type f -name '*.jar' ! -name '*sources*' ! -name '*javadoc*' | head -n1)"
              mkdir -p $(Build.ArtifactStagingDirectory)/out
              cp "$JAR" $(Build.ArtifactStagingDirectory)/out/app.jar
            displayName: Maven Build
          - task: PublishPipelineArtifact@1
            displayName: Publish JAR
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/out'
              artifact: 'jar'
              publishLocation: 'pipeline'
          - script: |
              set -euo pipefail
              az login --service-principal -u "$AZURE_CLIENT_ID" -p "$AZURE_CLIENT_SECRET" --tenant "$AZURE_TENANT_ID"
              az account set --subscription "$AZURE_SUBSCRIPTION_ID"
              az provider register --namespace Microsoft.ContainerInstance
              az provider register --namespace Microsoft.Network
              az acr login -n "$AZ_ACR_NAME"
              docker build -t "$IMAGE_NAME:$IMAGE_TAG" .
              docker push "$IMAGE_NAME:$IMAGE_TAG"
              docker tag "$IMAGE_NAME:$IMAGE_TAG" "$IMAGE_NAME:latest"
              docker push "$IMAGE_NAME:latest"
              NEW_IMAGE="$IMAGE_NAME:$IMAGE_TAG"
              if az container show -g "$AZ_RESOURCE_GROUP" -n "$AZ_ACI_NAME" >/dev/null 2>&1; then
                az container delete -g "$AZ_RESOURCE_GROUP" -n "$AZ_ACI_NAME" -y
              fi
              az container create \
                -g "$AZ_RESOURCE_GROUP" \
                -n "$AZ_ACI_NAME" \
                -l "$AZ_ACI_LOCATION" \
                --image "$NEW_IMAGE" \
                --registry-login-server "$AZ_ACR_NAME.azurecr.io" \
                ${ACR_USERNAME:+--registry-username "${ACR_USERNAME}"} \
                ${ACR_PASSWORD:+--registry-password "${ACR_PASSWORD}"} \
                --ip-address Public \
                --dns-name-label "$AZ_ACI_DNS_LABEL" \
                --ports "$APP_PORT" \
                --cpu 1 \
                --memory 1.5 \
                --os-type Linux \
                --restart-policy Always
              FQDN=$(az container show -g "$AZ_RESOURCE_GROUP" -n "$AZ_ACI_NAME" --query "ipAddress.fqdn" -o tsv)
              echo "Deploy ACI listo: http://$FQDN:$APP_PORT"
            displayName: Build and Deploy ACI
            env:
              AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
              AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
              AZURE_TENANT_ID: $(AZURE_TENANT_ID)
              AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              AZ_ACR_NAME: $(AZ_ACR_NAME)
              AZ_RESOURCE_GROUP: $(AZ_RESOURCE_GROUP)
              AZ_ACI_NAME: $(AZ_ACI_NAME)
              AZ_ACI_LOCATION: $(AZ_ACI_LOCATION)
              AZ_ACI_DNS_LABEL: $(AZ_ACI_DNS_LABEL)
              APP_PORT: $(APP_PORT)
              IMAGE_NAME: $(IMAGE_NAME)
              IMAGE_TAG: $(IMAGE_TAG)
              ACR_USERNAME: $(ACR_USERNAME)
              ACR_PASSWORD: $(ACR_PASSWORD)

  - stage: deploy_vm
    displayName: Deploy to VM
    dependsOn: deploy
    condition: succeeded()
    jobs:
      - job: deploy_remote
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: Download JAR Artifact
            inputs:
              artifact: jar
              path: $(Pipeline.Workspace)/jar

          - task: DownloadSecureFile@1
            name: sshkey
            displayName: Download SSH key
            inputs:
              secureFile: 'netby-test_key.pem'

          - script: |
              set -euo pipefail
              cp "$(sshkey.secureFilePath)" id_rsa
              chmod 600 id_rsa

              scp -i id_rsa -o StrictHostKeyChecking=no \
                "$(Pipeline.Workspace)/jar/app.jar" \
                "$(REMOTE_USER)@$(REMOTE_HOST):/tmp/app.jar"

              ssh -i id_rsa -o StrictHostKeyChecking=no "$(REMOTE_USER)@$(REMOTE_HOST)" bash -s <<EOF
              set -euo pipefail
              APP_DIR="$(REMOTE_PATH)"
              SVC="$(SERVICE_NAME)"
              sudo mkdir -p "\$APP_DIR/backups"
              if [ -f "\$APP_DIR/app.jar" ]; then
                TS=\$(date +%Y%m%d-%H%M%S)
                sudo mv "\$APP_DIR/app.jar" "\$APP_DIR/backups/app-\$TS.jar"
              fi
              sudo mv /tmp/app.jar "\$APP_DIR/app.jar"
              sudo chown azureuser:azureuser "\$APP_DIR/app.jar"
              sudo systemctl restart "\$SVC"
              EOF

              ok=0
              for i in {1..30}; do
                code=$(curl -s -o /dev/null -w "%{http_code}" "$(HEALTH_URL)" || true)
                if [ "$code" = "200" ]; then ok=1; break; fi
                sleep 5
              done

              if [ "$ok" -ne 1 ]; then
                echo "Health FAIL → rollback"
                ssh -i id_rsa -o StrictHostKeyChecking=no "$(REMOTE_USER)@$(REMOTE_HOST)" bash -s <<EOF
                set -euo pipefail
                APP_DIR="$(REMOTE_PATH)"
                SVC="$(SERVICE_NAME)"
                PREV=\$(ls -1t "\$APP_DIR"/backups/app-*.jar 2>/dev/null | head -n1 || true)
                if [ -n "\$PREV" ]; then
                  TS=\$(date +%Y%m%d-%H%M%S)
                  sudo mv "\$APP_DIR/app.jar" "\$APP_DIR/app_failed_\$TS.jar" || true
                  sudo cp "\$PREV" "\$APP_DIR/app.jar"
                  sudo chown azureuser:azureuser "\$APP_DIR/app.jar"
                  sudo systemctl restart "\$SVC"
                else
                  echo "No hay backup previo para rollback"
                fi
                EOF
                echo "Logs del servicio (últimas 200 líneas):"
                ssh -i id_rsa -o StrictHostKeyChecking=no "$(REMOTE_USER)@$(REMOTE_HOST)" 'sudo journalctl -u '"$(SERVICE_NAME)"' -n 200 --no-pager || true'
                exit 1
              fi
            displayName: Copy, Restart, Health & Rollback
            env:
              REMOTE_HOST: $(REMOTE_HOST)
              REMOTE_USER: $(REMOTE_USER)
              REMOTE_PATH: $(REMOTE_PATH)
              SERVICE_NAME: $(SERVICE_NAME)
              HEALTH_URL: $(HEALTH_URL)

          - script: |
              ssh -i id_rsa -o StrictHostKeyChecking=no "$(REMOTE_USER)@$(REMOTE_HOST)" 'sudo journalctl -u '"$(SERVICE_NAME)"' -n 60 --no-pager || true'
            displayName: Tail service logs (success)
            env:
              REMOTE_HOST: $(REMOTE_HOST)
              REMOTE_USER: $(REMOTE_USER)
              SERVICE_NAME: $(SERVICE_NAME)
