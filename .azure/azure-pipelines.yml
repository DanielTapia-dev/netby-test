trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  IMAGE_NAME: '$(AZ_ACR_NAME).azurecr.io/demo-spring'
  IMAGE_TAG: '$(Build.BuildId)'
  APP_PORT: '8080'

stages:
  - stage: build
    displayName: Build & Push to ACR
    jobs:
      - job: build_job
        steps:
          - script: |
              ./mvnw -B -q -DskipTests dependency:go-offline || mvn -B -q -DskipTests dependency:go-offline
              ./mvnw -B -q -DskipTests clean package || mvn -B -q -DskipTests clean package
              ls -la target
            displayName: "Maven package"

          - script: |
              echo "Azure CLI login (Service Principal)"
              az login --service-principal \
                -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)
              az account set --subscription $(AZURE_SUBSCRIPTION_ID)
              
              echo "Login to ACR & build image"
              az acr login -n $(AZ_ACR_NAME)
              docker build -t $(IMAGE_NAME):$(IMAGE_TAG) .
              docker push $(IMAGE_NAME):$(IMAGE_TAG)
              docker tag  $(IMAGE_NAME):$(IMAGE_TAG) $(IMAGE_NAME):latest
              docker push $(IMAGE_NAME):latest
              
              # Publicamos también el JAR para 'release' del enunciado
              mkdir -p out && cp target/*.jar out/app.jar
            displayName: "Docker build & push to ACR"

          - script: |
              echo "##vso[artifact.upload containerfolder=jar;artifactname=jar]out"
            displayName: "Publish JAR artifact (via script)"

  - stage: sast
    displayName: Static Analysis (CLI)
    dependsOn: build
    jobs:
      - job: sast_job
        steps:
          - script: |
              pipx install semgrep || pip install --user semgrep
              semgrep --version
              semgrep --config p/java || true
            displayName: "Semgrep Java (non-blocking)"

  - stage: release
    displayName: Release Marker
    dependsOn: sast
    jobs:
      - job: release_job
        steps:
          - script: |
              echo "Release complete: image pushed and JAR artifact published."
            displayName: "Mark release"

  - stage: deploy
    displayName: Deploy/Update Azure Container Instance
    dependsOn: release
    condition: succeeded()
    jobs:
      - job: deploy_job
        steps:
          - script: |
              set -e
              echo "Azure login"
              az login --service-principal \
                -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)
              az account set --subscription $(AZURE_SUBSCRIPTION_ID)
              
              NEW_IMAGE="$(AZ_ACR_NAME).azurecr.io/demo-spring:$(Build.BuildId)"
              echo "Target image: $NEW_IMAGE"
              
              echo "Check if ACI exists..."
              set +e
              az container show -g $(AZ_RESOURCE_GROUP) -n $(AZ_ACI_NAME) >/dev/null 2>&1
              EXISTS=$?
              set -e
              
              if [ "$EXISTS" != "0" ]; then
                echo "ACI doesn't exist → creating it..."
                az container create \
                  -g $(AZ_RESOURCE_GROUP) -n $(AZ_ACI_NAME) -l $(AZ_ACI_LOCATION) \
                  --image "$NEW_IMAGE" \
                  --registry-login-server "$(AZ_ACR_NAME).azurecr.io" \
                  --registry-username "$(ACR_USERNAME)" \
                  --registry-password "$(ACR_PASSWORD)" \
                  --dns-name-label "$(AZ_ACI_DNS_LABEL)" \
                  --ports $(APP_PORT) \
                  --cpu 1 --memory 1.5 \
                  --restart-policy Always
                PREV_IMAGE="$NEW_IMAGE"   # primera vez no hay rollback
              else
                echo "ACI exists → updating image..."
                PREV_IMAGE=$(az container show -g $(AZ_RESOURCE_GROUP) -n $(AZ_ACI_NAME) --query "containers[0].image" -o tsv)
                echo "Previous image: $PREV_IMAGE"
                az container update \
                  -g $(AZ_RESOURCE_GROUP) -n $(AZ_ACI_NAME) \
                  --image "$NEW_IMAGE" \
                  --set 'containers[0].resources.requests.cpu=1' \
                  --set 'containers[0].resources.requests.memoryInGB=1.5'
              fi
              
              FQDN=$(az container show -g $(AZ_RESOURCE_GROUP) -n $(AZ_ACI_NAME) --query ipAddress.fqdn -o tsv)
              echo "FQDN=$FQDN"
              
              echo "Waiting for health at http://$FQDN:$(APP_PORT)/actuator/health ..."
              for i in {1..30}; do
                code=$(curl -s -o /dev/null -w "%{http_code}" "http://$FQDN:$(APP_PORT)/actuator/health")
                if [ "$code" = "200" ]; then echo "UP ✅ http://$FQDN:$(APP_PORT)/actuator/health"; exit 0; fi
                sleep 5
              done
              
              echo "Health failed ❌ → Rolling back to $PREV_IMAGE"
              if [ -n "$PREV_IMAGE" ]; then
                az container update \
                  -g $(AZ_RESOURCE_GROUP) -n $(AZ_ACI_NAME) \
                  --image "$PREV_IMAGE"
              fi
              exit 1
            displayName: "Create-or-Update ACI + Healthcheck + Rollback"
