trigger:
  branches:
    include:
      - main
pr: none

pool:
  vmImage: ubuntu-latest

variables:
  - group: 'azure-netby-secrets'
  - name: IMAGE_NAME
    value: '$(AZ_ACR_NAME).azurecr.io/demo-spring'
  - name: IMAGE_TAG
    value: '$(Build.BuildId)'

stages:
  - stage: deploy
    displayName: Build → Push → ACI
    jobs:
      - job: run
        displayName: Build & Deploy ACI
        steps:
          - script: |
              set -euo pipefail

              ./mvnw -q -DskipTests clean package || mvn -q -DskipTests clean package

              JAR="$(find target -maxdepth 1 -type f -name '*.jar' ! -name '*sources*' ! -name '*javadoc*' | head -n1)"
              mkdir -p $(Build.ArtifactStagingDirectory)/out
              cp "$JAR" $(Build.ArtifactStagingDirectory)/out/app.jar
              echo "##vso[artifact.upload containerfolder=jar;artifactname=jar]$(Build.ArtifactStagingDirectory)/out"

              az login --service-principal \
                -u "$AZURE_CLIENT_ID" \
                -p "$AZURE_CLIENT_SECRET" \
                --tenant "$AZURE_TENANT_ID"
              az account set --subscription "$AZURE_SUBSCRIPTION_ID"

              az provider register --namespace Microsoft.ContainerInstance
              az provider register --namespace Microsoft.Network

              az acr login -n "$AZ_ACR_NAME"
              docker build -t "$IMAGE_NAME:$IMAGE_TAG" .
              docker push  "$IMAGE_NAME:$IMAGE_TAG"
              docker tag   "$IMAGE_NAME:$IMAGE_TAG" "$IMAGE_NAME:latest"
              docker push  "$IMAGE_NAME:latest"

              NEW_IMAGE="$IMAGE_NAME:$IMAGE_TAG"
              if ! az container show -g "$AZ_RESOURCE_GROUP" -n "$AZ_ACI_NAME" >/dev/null 2>&1; then
                az container create \
                  -g "$AZ_RESOURCE_GROUP" \
                  -n "$AZ_ACI_NAME" \
                  -l "$AZ_ACI_LOCATION" \
                  --image "$NEW_IMAGE" \
                  --registry-login-server "$AZ_ACR_NAME.azurecr.io" \
                  ${ACR_USERNAME:+--registry-username "${ACR_USERNAME}"} \
                  ${ACR_PASSWORD:+--registry-password "${ACR_PASSWORD}"} \
                  --ip-address Public \
                  --dns-name-label "$AZ_ACI_DNS_LABEL" \
                  --ports "$APP_PORT" \
                  --cpu 1 \
                  --memory 1.5 \
                  --os-type Linux \
                  --restart-policy Always
              else
                az container update \
                  -g "$AZ_RESOURCE_GROUP" \
                  -n "$AZ_ACI_NAME" \
                  --image "$NEW_IMAGE"
              fi

              FQDN=$(az container show -g "$AZ_RESOURCE_GROUP" -n "$AZ_ACI_NAME" --query "ipAddress.fqdn" -o tsv)
              echo "Deploy ACI listo: http://$FQDN:$APP_PORT"
            displayName: Build & Deploy ACI
            env:
              AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
              AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
              AZURE_TENANT_ID: $(AZURE_TENANT_ID)
              AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              AZ_ACR_NAME: $(AZ_ACR_NAME)
              AZ_RESOURCE_GROUP: $(AZ_RESOURCE_GROUP)
              AZ_ACI_NAME: $(AZ_ACI_NAME)
              AZ_ACI_LOCATION: $(AZ_ACI_LOCATION)
              AZ_ACI_DNS_LABEL: $(AZ_ACI_DNS_LABEL)
              APP_PORT: $(APP_PORT)
              IMAGE_NAME: $(IMAGE_NAME)
              IMAGE_TAG: $(IMAGE_TAG)
              ACR_USERNAME: $(ACR_USERNAME)
              ACR_PASSWORD: $(ACR_PASSWORD)

  - stage: deploy_vm
    displayName: Deploy a VM (backup + restart + health)
    dependsOn: deploy
    condition: succeeded()
    jobs:
      - job: deploy_remote
        displayName: Deploy remoto
        steps:
          - script: |
              set -euo pipefail

              umask 077
              echo "$SSH_PRIVATE_KEY" > id_rsa
              chmod 600 id_rsa

              mkdir -p deploy && cd deploy
              echo "##vso[artifact.download artifactname=jar]"
              cd ..

              scp -i id_rsa -o StrictHostKeyChecking=no deploy/out/app.jar "$REMOTE_USER@$REMOTE_HOST:/tmp/app.jar"

              ssh -i id_rsa -o StrictHostKeyChecking=no "$REMOTE_USER@$REMOTE_HOST" bash -s <<'EOF'
              set -euo pipefail
              APP_DIR="$REMOTE_PATH"
              SVC="$SERVICE_NAME"

              sudo mkdir -p "$APP_DIR/backups"
              if [ -f "$APP_DIR/app.jar" ]; then
                TS=$(date +%Y%m%d-%H%M%S)
                sudo mv "$APP_DIR/app.jar" "$APP_DIR/backups/app-$TS.jar"
              fi
              sudo mv /tmp/app.jar "$APP_DIR/app.jar"
              sudo chown $(whoami):$(whoami) "$APP_DIR/app.jar" || true
              sudo systemctl restart "$SVC"
              EOF

              for i in {1..30}; do
                code=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_URL" || true)
                [ "$code" = "200" ] && echo "UP ✅ $HEALTH_URL" && exit 0
                sleep 5
              done
              echo "❌ Health FAIL en $HEALTH_URL"; exit 1
            displayName: Deploy remoto (VM)
            env:
              REMOTE_HOST: $(REMOTE_HOST)
              REMOTE_USER: $(REMOTE_USER)
              REMOTE_PATH: $(REMOTE_PATH)
              SERVICE_NAME: $(SERVICE_NAME)
              HEALTH_URL: $(HEALTH_URL)
              SSH_PRIVATE_KEY: $(SSH_PRIVATE_KEY)
