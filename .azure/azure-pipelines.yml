trigger: none
pr: none

pool:
  vmImage: ubuntu-latest

variables:
  IMAGE_NAME: '$(AZ_ACR_NAME).azurecr.io/demo-spring'
  IMAGE_TAG: '$(Build.BuildId)'
  APP_PORT: '$(APP_PORT)'

stages:
- stage: all_in_one
  displayName: Build → SAST → Push → Deploy ACI (one shot)
  jobs:
    - job: run_all
      steps:
        - script: |
            set -euo pipefail

            echo "== MAVEN BUILD =="
            ./mvnw -B -q -DskipTests dependency:go-offline || mvn -B -q -DskipTests dependency:go-offline
            ./mvnw -B -q -DskipTests clean package || mvn -B -q -DskipTests clean package
            ls -la target || true
            JAR="$(find target -maxdepth 1 -type f -name '*.jar' ! -name '*sources*' ! -name '*javadoc*' | head -n1)"
            test -n "${JAR:-}" || (echo "No se encontró .jar en target"; exit 1)
            echo "Jar: $JAR"
            mkdir -p $(Build.ArtifactStagingDirectory)/out
            cp "$JAR" $(Build.ArtifactStagingDirectory)/out/app.jar
            echo "##vso[artifact.upload containerfolder=jar;artifactname=jar]$(Build.ArtifactStagingDirectory)/out"

            echo "== SAST (Semgrep) =="
            pipx install semgrep || pip install --user semgrep
            semgrep --version
            semgrep --config p/java || true   # non-blocking

            echo "== AZ LOGIN =="
            az login --service-principal -u "$(AZURE_CLIENT_ID)" -p "$(AZURE_CLIENT_SECRET)" --tenant "$(AZURE_TENANT_ID)"
            az account set --subscription "$(AZURE_SUBSCRIPTION_ID)"

            echo "== ACR LOGIN & DOCKER BUILD/PUSH =="
            az acr login -n "$(AZ_ACR_NAME)"
            docker build -t "$(IMAGE_NAME):$(IMAGE_TAG)" .
            docker push  "$(IMAGE_NAME):$(IMAGE_TAG)"
            docker tag   "$(IMAGE_NAME):$(IMAGE_TAG)" "$(IMAGE_NAME):latest"
            docker push  "$(IMAGE_NAME):latest"

            echo "== ACI CREATE/UPDATE =="
            NEW_IMAGE="$(IMAGE_NAME):$(IMAGE_TAG)"

            set +e
            az container show -g "$(AZ_RESOURCE_GROUP)" -n "$(AZ_ACI_NAME)" >/dev/null 2>&1
            EXISTS=$?
            set -e

            if [ "$EXISTS" != "0" ]; then
              echo "ACI no existe → creando..."
              az container create \
                -g "$(AZ_RESOURCE_GROUP)" -n "$(AZ_ACI_NAME)" -l "$(AZ_ACI_LOCATION)" \
                --image "$NEW_IMAGE" \
                --registry-login-server "$(AZ_ACR_NAME).azurecr.io" \
                ${ACR_USERNAME:+--registry-username "${ACR_USERNAME}"} \
                ${ACR_PASSWORD:+--registry-password "${ACR_PASSWORD}"} \
                --dns-name-label "$(AZ_ACI_DNS_LABEL)" \
                --ports "$(APP_PORT)" \
                --cpu 1 --memory 1.5 \
                --restart-policy Always
              PREV_IMAGE="$NEW_IMAGE"
            else
              echo "ACI existe → actualizando imagen..."
              PREV_IMAGE=$(az container show -g "$(AZ_RESOURCE_GROUP)" -n "$(AZ_ACI_NAME)" --query "containers[0].image" -o tsv)
              az container update \
                -g "$(AZ_RESOURCE_GROUP)" -n "$(AZ_ACI_NAME)" \
                --image "$NEW_IMAGE" \
                --set 'containers[0].resources.requests.cpu=1' \
                --set 'containers[0].resources.requests.memoryInGB=1.5'
            fi

            FQDN=$(az container show -g "$(AZ_RESOURCE_GROUP)" -n "$(AZ_ACI_NAME)" --query ipAddress.fqdn -o tsv)
            echo "FQDN: $FQDN"

            echo "== HEALTH CHECK =="
            for i in {1..30}; do
              code=$(curl -s -o /dev/null -w "%{http_code}" "http://$FQDN:$(APP_PORT)/actuator/health")
              if [ "$code" = "200" ]; then
                echo "UP ✅  http://$FQDN:$(APP_PORT)/actuator/health"
                exit 0
              fi
              sleep 5
            done

            echo "❌ Health FAIL → rollback a $PREV_IMAGE"
            if [ -n "${PREV_IMAGE:-}" ]; then
              az container update -g "$(AZ_RESOURCE_GROUP)" -n "$(AZ_ACI_NAME)" --image "$PREV_IMAGE"
            fi
            exit 1
          displayName: "One-shot pipeline"
