trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  IMAGE_NAME: '$(AZ_ACR_NAME).azurecr.io/demo-spring'
  IMAGE_TAG: '$(Build.BuildId)'
  APP_PORT: '8080'

stages:
  - stage: build
    displayName: Build & Docker Push
    jobs:
      - job: build_job
        steps:
          - script: |
              ./mvnw -B -q -DskipTests dependency:go-offline || mvn -B -q -DskipTests dependency:go-offline
              ./mvnw -B -q -DskipTests clean package || mvn -B -q -DskipTests clean package
              ls -la target
            displayName: "Maven package"

          - script: |
              echo "Azure CLI login (SP)"
              az login --service-principal -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)
              az account set --subscription $(AZURE_SUBSCRIPTION_ID)
              
              echo "Login to ACR"
              az acr login -n $(AZ_ACR_NAME)
              
              echo "Docker build & push"
              docker build -t $(IMAGE_NAME):$(IMAGE_TAG) .
              docker push $(IMAGE_NAME):$(IMAGE_TAG)
              
              echo "Tag & push latest (optional)"
              docker tag $(IMAGE_NAME):$(IMAGE_TAG) $(IMAGE_NAME):latest
              docker push $(IMAGE_NAME):latest
              
              mkdir -p out && cp target/*.jar out/app.jar
            displayName: "Build & Push to ACR + export JAR"

          - script: |
              echo "##vso[artifact.upload containerfolder=jar;artifactname=jar]out"
            displayName: "Publish JAR artifact (via script)"

  - stage: sast
    displayName: Static Analysis (CLI)
    dependsOn: build
    jobs:
      - job: sast_job
        steps:
          - script: |
              pipx install semgrep || pip install --user semgrep
              semgrep --version
              semgrep --config p/java || true
            displayName: "Semgrep Java (non-blocking)"

  - stage: release
    displayName: Mark Release
    dependsOn: sast
    jobs:
      - job: release_job
        steps:
          - script: |
              echo "Release marker: JAR artifact published and image pushed"
            displayName: "Release note"

  - stage: deploy
    displayName: Deploy to Azure Container Instances
    dependsOn: release
    condition: succeeded()
    jobs:
      - job: deploy_job
        steps:
          - script: |
              echo "Azure login"
              az login --service-principal -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)
              az account set --subscription $(AZURE_SUBSCRIPTION_ID)
              
              echo "Get current FQDN & current image"
              FQDN=$(az container show -g $(AZ_RESOURCE_GROUP) -n $(AZ_ACI_NAME) --query ipAddress.fqdn -o tsv)
              CURR_IMG=$(az container show -g $(AZ_RESOURCE_GROUP) -n $(AZ_ACI_NAME) --query "containers[0].image" -o tsv)
              echo "FQDN=$FQDN"
              echo "Current image=$CURR_IMG"
              
              echo "Update ACI to new image: $(IMAGE_NAME):$(IMAGE_TAG)"
              az container update \
                -g $(AZ_RESOURCE_GROUP) -n $(AZ_ACI_NAME) \
                --image "$(IMAGE_NAME):$(IMAGE_TAG)"
              
              echo "Wait for health https://$FQDN/actuator/health ..."
              for i in {1..30}; do
                code=$(curl -k -s -o /dev/null -w "%{http_code}" "https://$FQDN/actuator/health")
                if [ "$code" = "200" ]; then echo "UP ✅ https://$FQDN/actuator/health"; exit 0; fi
                sleep 5
              done
              
              echo "Health failed ❌ → Rolling back to $CURR_IMG"
              az container update \
                -g $(AZ_RESOURCE_GROUP) -n $(AZ_ACI_NAME) \
                --image "$CURR_IMG"
              exit 1
            displayName: "Update ACI + Healthcheck + Rollback"
